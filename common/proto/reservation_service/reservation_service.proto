syntax = "proto3";

option go_package = "booking-backend/common/proto/reservation_service";

import "google/api/annotations.proto";

service ReservationService {
  rpc Create(ReservationCreateRequest) returns (ReservationCreateResponse) {
    option (google.api.http) = {
      post: "/reservations"
      body: "*"
    };
  }
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {
		option (google.api.http) = {
		  get: "/reservations"
		};
	}
	rpc GetWaitingReservations(WaitingReservationsForHostRequest) returns (WaitingReservationsForHostResponse){
		option (google.api.http) = {
			get: "/reservations/waiting"
		};
	}
	rpc ConfirmReservation(ConfirmReservationRequest) returns (ConfirmReservationResponse){
		option (google.api.http) = {
			put: "/reservations/confirm/{id}"
		};
	}
  rpc Delete(DeleteReservationRequest) returns (DeleteReservationResponse) {
		option (google.api.http) = {
		  delete: "/reservations/{id}"
		};
	}
  rpc GetHostAnalytics(HostAnalyticsRequest) returns (HostAnalyticsResponse) {
	}
}

message ReservationCreateRequest {
	string accommodation = 1;
  string dateFrom = 2;
  string dateTo = 3;
  int32 guests = 4;
}

message ReservationCreateResponse {
  string data = 2;
}

message WaitingReservationsForHostRequest{

}

message WaitingReservationsForHostResponse{
	repeated WaitingReservation reservations = 1;
}

message Reservation {
	string id = 1;
	string accommodation = 2;
	string user = 3;
	string dateFrom = 4;
	string dateTo = 5;
	int32 guests = 6;
	int32 status = 7;
  string host = 8;
}

message WaitingReservation {
	string id = 1;
	string accommodation = 2;
	string user = 3;
	string dateFrom = 4;
	string dateTo = 5;
	int32 guests = 6;
	int32 userCanceledReservations = 7;

}

message ConfirmReservationRequest{
	string id = 1;
}

message ConfirmReservationResponse{
	string message = 1;
}

message GetAllRequest {
}

message GetAllResponse {
	repeated Reservation reservations = 1;
}

message DeleteReservationRequest {
	string id = 1;
}

message DeleteReservationResponse {
	string message = 1;
}

message HostAnalyticsRequest {
  string host = 1;
}

message HostAnalyticsResponse {
  float cancelRate = 1;
  int32 expiredCount = 2;
  int32 intervalCount = 3;
}
