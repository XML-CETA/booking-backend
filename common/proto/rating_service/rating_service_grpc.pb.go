// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: rating_service/rating_service.proto

package rating_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingService_CreateAccommodationRate_FullMethodName     = "/RatingService/CreateAccommodationRate"
	RatingService_UpdateAccommodationRate_FullMethodName     = "/RatingService/UpdateAccommodationRate"
	RatingService_DeleteAccommodationRate_FullMethodName     = "/RatingService/DeleteAccommodationRate"
	RatingService_GetAllAccommodationRates_FullMethodName    = "/RatingService/GetAllAccommodationRates"
	RatingService_GetAverageAccommodationRate_FullMethodName = "/RatingService/GetAverageAccommodationRate"
	RatingService_CreateUserRating_FullMethodName            = "/RatingService/CreateUserRating"
	RatingService_GetHostRates_FullMethodName                = "/RatingService/GetHostRates"
	RatingService_UpdateUserRating_FullMethodName            = "/RatingService/UpdateUserRating"
	RatingService_DeleteUserRating_FullMethodName            = "/RatingService/DeleteUserRating"
	RatingService_GetAverageUserRating_FullMethodName        = "/RatingService/GetAverageUserRating"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	CreateAccommodationRate(ctx context.Context, in *RatingAccommodationRequest, opts ...grpc.CallOption) (*RateResponse, error)
	UpdateAccommodationRate(ctx context.Context, in *RatingAccommodationRequest, opts ...grpc.CallOption) (*RateResponse, error)
	DeleteAccommodationRate(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetAllAccommodationRates(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*AllAccommodationRatesResponse, error)
	GetAverageAccommodationRate(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*AverageRateAccommodationResponse, error)
	CreateUserRating(ctx context.Context, in *RateUserRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetHostRates(ctx context.Context, in *HostRatesRequest, opts ...grpc.CallOption) (*HostRatesResponse, error)
	UpdateUserRating(ctx context.Context, in *UpdateUserRatingRequest, opts ...grpc.CallOption) (*RateResponse, error)
	DeleteUserRating(ctx context.Context, in *DeleteUserRatingRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetAverageUserRating(ctx context.Context, in *HostRatesRequest, opts ...grpc.CallOption) (*AverageUserRatingResponse, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) CreateAccommodationRate(ctx context.Context, in *RatingAccommodationRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_CreateAccommodationRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateAccommodationRate(ctx context.Context, in *RatingAccommodationRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateAccommodationRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteAccommodationRate(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteAccommodationRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAllAccommodationRates(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*AllAccommodationRatesResponse, error) {
	out := new(AllAccommodationRatesResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAllAccommodationRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageAccommodationRate(ctx context.Context, in *RateAccommodationIdRequest, opts ...grpc.CallOption) (*AverageRateAccommodationResponse, error) {
	out := new(AverageRateAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageAccommodationRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) CreateUserRating(ctx context.Context, in *RateUserRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_CreateUserRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetHostRates(ctx context.Context, in *HostRatesRequest, opts ...grpc.CallOption) (*HostRatesResponse, error) {
	out := new(HostRatesResponse)
	err := c.cc.Invoke(ctx, RatingService_GetHostRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateUserRating(ctx context.Context, in *UpdateUserRatingRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateUserRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteUserRating(ctx context.Context, in *DeleteUserRatingRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteUserRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageUserRating(ctx context.Context, in *HostRatesRequest, opts ...grpc.CallOption) (*AverageUserRatingResponse, error) {
	out := new(AverageUserRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageUserRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	CreateAccommodationRate(context.Context, *RatingAccommodationRequest) (*RateResponse, error)
	UpdateAccommodationRate(context.Context, *RatingAccommodationRequest) (*RateResponse, error)
	DeleteAccommodationRate(context.Context, *RateAccommodationIdRequest) (*RateResponse, error)
	GetAllAccommodationRates(context.Context, *RateAccommodationIdRequest) (*AllAccommodationRatesResponse, error)
	GetAverageAccommodationRate(context.Context, *RateAccommodationIdRequest) (*AverageRateAccommodationResponse, error)
	CreateUserRating(context.Context, *RateUserRequest) (*RateResponse, error)
	GetHostRates(context.Context, *HostRatesRequest) (*HostRatesResponse, error)
	UpdateUserRating(context.Context, *UpdateUserRatingRequest) (*RateResponse, error)
	DeleteUserRating(context.Context, *DeleteUserRatingRequest) (*RateResponse, error)
	GetAverageUserRating(context.Context, *HostRatesRequest) (*AverageUserRatingResponse, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) CreateAccommodationRate(context.Context, *RatingAccommodationRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodationRate not implemented")
}
func (UnimplementedRatingServiceServer) UpdateAccommodationRate(context.Context, *RatingAccommodationRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodationRate not implemented")
}
func (UnimplementedRatingServiceServer) DeleteAccommodationRate(context.Context, *RateAccommodationIdRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationRate not implemented")
}
func (UnimplementedRatingServiceServer) GetAllAccommodationRates(context.Context, *RateAccommodationIdRequest) (*AllAccommodationRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodationRates not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageAccommodationRate(context.Context, *RateAccommodationIdRequest) (*AverageRateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageAccommodationRate not implemented")
}
func (UnimplementedRatingServiceServer) CreateUserRating(context.Context, *RateUserRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRating not implemented")
}
func (UnimplementedRatingServiceServer) GetHostRates(context.Context, *HostRatesRequest) (*HostRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRates not implemented")
}
func (UnimplementedRatingServiceServer) UpdateUserRating(context.Context, *UpdateUserRatingRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteUserRating(context.Context, *DeleteUserRatingRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRating not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageUserRating(context.Context, *HostRatesRequest) (*AverageUserRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageUserRating not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_CreateAccommodationRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateAccommodationRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateAccommodationRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateAccommodationRate(ctx, req.(*RatingAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateAccommodationRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateAccommodationRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateAccommodationRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateAccommodationRate(ctx, req.(*RatingAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteAccommodationRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteAccommodationRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteAccommodationRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteAccommodationRate(ctx, req.(*RateAccommodationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAllAccommodationRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllAccommodationRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllAccommodationRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllAccommodationRates(ctx, req.(*RateAccommodationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageAccommodationRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageAccommodationRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageAccommodationRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageAccommodationRate(ctx, req.(*RateAccommodationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_CreateUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).CreateUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_CreateUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).CreateUserRating(ctx, req.(*RateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetHostRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetHostRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetHostRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetHostRates(ctx, req.(*HostRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateUserRating(ctx, req.(*UpdateUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteUserRating(ctx, req.(*DeleteUserRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageUserRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageUserRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageUserRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageUserRating(ctx, req.(*HostRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccommodationRate",
			Handler:    _RatingService_CreateAccommodationRate_Handler,
		},
		{
			MethodName: "UpdateAccommodationRate",
			Handler:    _RatingService_UpdateAccommodationRate_Handler,
		},
		{
			MethodName: "DeleteAccommodationRate",
			Handler:    _RatingService_DeleteAccommodationRate_Handler,
		},
		{
			MethodName: "GetAllAccommodationRates",
			Handler:    _RatingService_GetAllAccommodationRates_Handler,
		},
		{
			MethodName: "GetAverageAccommodationRate",
			Handler:    _RatingService_GetAverageAccommodationRate_Handler,
		},
		{
			MethodName: "CreateUserRating",
			Handler:    _RatingService_CreateUserRating_Handler,
		},
		{
			MethodName: "GetHostRates",
			Handler:    _RatingService_GetHostRates_Handler,
		},
		{
			MethodName: "UpdateUserRating",
			Handler:    _RatingService_UpdateUserRating_Handler,
		},
		{
			MethodName: "DeleteUserRating",
			Handler:    _RatingService_DeleteUserRating_Handler,
		},
		{
			MethodName: "GetAverageUserRating",
			Handler:    _RatingService_GetAverageUserRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating_service/rating_service.proto",
}
